# .github/workflows/update_m3u.yml

name: Update M3U Files # 工作流名称

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    # CRON 表达式，例如：每 6 小时运行一次 (在 00:00, 06:00, 12:00, 18:00 UTC)
    - cron: '0 */6 * * *'

jobs:
  update_and_commit:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu Runner

    steps:
      # 第一步：签出代码库
      # Checkout 需要获取仓库中的所有文件，包括你手动添加的 config.json
      - name: Check out repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 或指定 '3.11' 等

      # 第三步：安装 Python 依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests # 安装 filter_m3u.py 需要的库

      # 第四步：运行 Python 脚本来过滤 M3U 文件
      # 脚本现在会直接读取仓库根目录下的 config.json 文件
      - name: Run M3U filter script
        run: python filter_m3u.py
        # 确保 filter_m3u.py 知道从当前目录读取 config.json

      # 第五步：提交更改的文件
      # 注意：这里的 file_pattern 仍然包含 config.json
      # 如果你的脚本不会修改 config.json，且你只想提交 m3u 文件的更改，
      # 可以将 file_pattern 改为 '*.m3u'
      # 如果你偶尔会手动修改 config.json 并希望 workflow 自动提交，则保持不变
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: chore: Auto update filtered M3U files
          # 提交所有 .m3u 文件 和 config.json (如果它有变动或你手动改了它)
          file_pattern: '*.m3u config.json'
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com
          # 可选: branch: main

